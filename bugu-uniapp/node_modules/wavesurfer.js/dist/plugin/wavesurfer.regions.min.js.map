{"version":3,"file":"wavesurfer.regions.min.js","mappings":"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","sources":["webpack://WaveSurfer.[name]/webpack/universalModuleDefinition","webpack://WaveSurfer.[name]/./src/plugin/regions/index.js","webpack://WaveSurfer.[name]/./src/plugin/regions/region.js","webpack://WaveSurfer.[name]/webpack/bootstrap","webpack://WaveSurfer.[name]/webpack/startup"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"WaveSurfer\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"WaveSurfer\"] = factory();\n\telse\n\t\troot[\"WaveSurfer\"] = root[\"WaveSurfer\"] || {}, root[\"WaveSurfer\"][\"regions\"] = factory();\n})(self, function() {\nreturn ","/**\n *  @since 4.0.0 This class has been split\n *\n * @typedef {Object} RegionsPluginParams\n * @property {?boolean} dragSelection Enable creating regions by dragging with\n * the mouse\n * @property {?RegionParams[]} regions Regions that should be added upon\n * initialisation\n * @property {number} slop=2 The sensitivity of the mouse dragging\n * @property {?number} snapToGridInterval Snap the regions to a grid of the specified multiples in seconds\n * @property {?number} snapToGridOffset Shift the snap-to-grid by the specified seconds. May also be negative.\n * @property {?boolean} deferInit Set to true to manually call\n * @property {number[]} maxRegions Maximum number of regions that may be created by the user at one time.\n * `initPlugin('regions')`\n * @property {function} formatTimeCallback Allows custom formating for region tooltip.\n * @property {?number} edgeScrollWidth='5% from container edges' Optional width for edgeScroll to start\n */\n\n/**\n * @typedef {Object} RegionParams\n * @desc The parameters used to describe a region.\n * @example wavesurfer.addRegion(regionParams);\n * @property {string} id=→random The id of the region\n * @property {number} start=0 The start position of the region (in seconds).\n * @property {number} end=0 The end position of the region (in seconds).\n * @property {?boolean} loop Whether to loop the region when played back.\n * @property {boolean} drag=true Allow/disallow dragging the region.\n * @property {boolean} resize=true Allow/disallow resizing the region.\n * @property {string} [color='rgba(0, 0, 0, 0.1)'] HTML color code.\n * @property {?number} channelIdx Select channel to draw the region on (if there are multiple channel waveforms).\n * @property {?object} handleStyle A set of CSS properties used to style the left and right handle.\n * @property {?boolean} preventContextMenu=false Determines whether the context menu is prevented from being opened.\n * @property {boolean} showTooltip=true Enable/disable tooltip displaying start and end times when hovering over region.\n */\n\nimport {Region} from \"./region.js\";\n\n/**\n * Regions are visual overlays on waveform that can be used to play and loop\n * portions of audio. Regions can be dragged and resized.\n *\n * Visual customization is possible via CSS (using the selectors\n * `.wavesurfer-region` and `.wavesurfer-handle`).\n *\n * @implements {PluginClass}\n * @extends {Observer}\n *\n * @example\n * // es6\n * import RegionsPlugin from 'wavesurfer.regions.js';\n *\n * // commonjs\n * var RegionsPlugin = require('wavesurfer.regions.js');\n *\n * // if you are using <script> tags\n * var RegionsPlugin = window.WaveSurfer.regions;\n *\n * // ... initialising wavesurfer with the plugin\n * var wavesurfer = WaveSurfer.create({\n *   // wavesurfer options ...\n *   plugins: [\n *     RegionsPlugin.create({\n *       // plugin options ...\n *     })\n *   ]\n * });\n */\nexport default class RegionsPlugin {\n    /**\n     * Regions plugin definition factory\n     *\n     * This function must be used to create a plugin definition which can be\n     * used by wavesurfer to correctly instantiate the plugin.\n     *\n     * @param {RegionsPluginParams} params parameters use to initialise the plugin\n     * @return {PluginDefinition} an object representing the plugin\n     */\n    static create(params) {\n        return {\n            name: 'regions',\n            deferInit: params && params.deferInit ? params.deferInit : false,\n            params: params,\n            staticProps: {\n                addRegion(options) {\n                    if (!this.initialisedPluginList.regions) {\n                        this.initPlugin('regions');\n                    }\n                    return this.regions.add(options);\n                },\n\n                clearRegions() {\n                    this.regions && this.regions.clear();\n                },\n\n                enableDragSelection(options) {\n                    if (!this.initialisedPluginList.regions) {\n                        this.initPlugin('regions');\n                    }\n                    this.regions.enableDragSelection(options);\n                },\n\n                disableDragSelection() {\n                    this.regions.disableDragSelection();\n                }\n            },\n            instance: RegionsPlugin\n        };\n    }\n\n    constructor(params, ws) {\n        this.params = params;\n        this.wavesurfer = ws;\n        this.util = {\n            ...ws.util,\n            getRegionSnapToGridValue: value => {\n                return this.getRegionSnapToGridValue(value, params);\n            }\n        };\n        this.maxRegions = params.maxRegions;\n        this.regionsMinLength = params.regionsMinLength || null;\n\n        // turn the plugin instance into an observer\n        const observerPrototypeKeys = Object.getOwnPropertyNames(\n            this.util.Observer.prototype\n        );\n        observerPrototypeKeys.forEach(key => {\n            Region.prototype[key] = this.util.Observer.prototype[key];\n        });\n        this.wavesurfer.Region = Region;\n\n        // By default, scroll the container if the user drags a region\n        // within 5% of its edge\n        const scrollWidthProportion = 0.05;\n        this._onBackendCreated = () => {\n            this.wrapper = this.wavesurfer.drawer.wrapper;\n            this.orientation = this.wavesurfer.drawer.orientation;\n            if (this.params.regions) {\n                this.params.regions.forEach(region => {\n                    region.edgeScrollWidth = this.params.edgeScrollWidth ||\n                        this.wrapper.clientWidth * scrollWidthProportion;\n                    this.add(region);\n                });\n            }\n        };\n\n        // Id-based hash of regions\n        this.list = {};\n        this._onReady = () => {\n            this.wrapper = this.wavesurfer.drawer.wrapper;\n            this.vertical = this.wavesurfer.drawer.params.vertical;\n            if (this.params.dragSelection) {\n                this.enableDragSelection(this.params);\n            }\n            Object.keys(this.list).forEach(id => {\n                this.list[id].updateRender();\n            });\n        };\n    }\n\n    init() {\n        // Check if ws is ready\n        if (this.wavesurfer.isReady) {\n            this._onBackendCreated();\n            this._onReady();\n        } else {\n            this.wavesurfer.once('ready', this._onReady);\n            this.wavesurfer.once('backend-created', this._onBackendCreated);\n        }\n    }\n\n    destroy() {\n        this.wavesurfer.un('ready', this._onReady);\n        this.wavesurfer.un('backend-created', this._onBackendCreated);\n        this.disableDragSelection();\n        this.clear();\n    }\n\n    /**\n     * check to see if adding a new region would exceed maxRegions\n     * @return {boolean} whether we should proceed and create a region\n     * @private\n     */\n    wouldExceedMaxRegions() {\n        return (\n            this.maxRegions && Object.keys(this.list).length >= this.maxRegions\n        );\n    }\n\n    /**\n     * Add a region\n     *\n     * @param {object} params Region parameters\n     * @return {Region} The created region\n     */\n    add(params) {\n        if (this.wouldExceedMaxRegions()) {\n            return null;\n        }\n\n        if (!params.minLength && this.regionsMinLength) {\n            params = {...params, minLength: this.regionsMinLength};\n        }\n\n        const region = new this.wavesurfer.Region(params, this.util, this.wavesurfer);\n\n        this.list[region.id] = region;\n\n        region.on('remove', () => {\n            delete this.list[region.id];\n        });\n\n        return region;\n    }\n\n    /**\n     * Remove all regions\n     */\n    clear() {\n        Object.keys(this.list).forEach(id => {\n            this.list[id].remove();\n        });\n    }\n\n    enableDragSelection(params) {\n        this.disableDragSelection();\n\n        const slop = params.slop || 2;\n        const container = this.wavesurfer.drawer.container;\n        const scroll =\n            params.scroll !== false && this.wavesurfer.params.scrollParent;\n        const scrollSpeed = params.scrollSpeed || 1;\n        const scrollThreshold = params.scrollThreshold || 10;\n        let drag;\n        let duration = this.wavesurfer.getDuration();\n        let maxScroll;\n        let start;\n        let region;\n        let touchId;\n        let pxMove = 0;\n        let scrollDirection;\n        let wrapperRect;\n\n        // Scroll when the user is dragging within the threshold\n        const edgeScroll = e => {\n            if (!region || !scrollDirection) {\n                return;\n            }\n\n            // Update scroll position\n            let scrollLeft =\n                this.wrapper.scrollLeft + scrollSpeed * scrollDirection;\n            this.wrapper.scrollLeft = scrollLeft = Math.min(\n                maxScroll,\n                Math.max(0, scrollLeft)\n            );\n\n            // Update range\n            const end = this.wavesurfer.drawer.handleEvent(e);\n            region.update({\n                start: Math.min(end * duration, start * duration),\n                end: Math.max(end * duration, start * duration)\n            });\n\n            // Check that there is more to scroll and repeat\n            if (scrollLeft < maxScroll && scrollLeft > 0) {\n                window.requestAnimationFrame(() => {\n                    edgeScroll(e);\n                });\n            }\n        };\n\n        const eventDown = e => {\n            if (e.touches && e.touches.length > 1) {\n                return;\n            }\n            duration = this.wavesurfer.getDuration();\n            touchId = e.targetTouches ? e.targetTouches[0].identifier : null;\n\n            // Store for scroll calculations\n            maxScroll = this.wrapper.scrollWidth -\n                this.wrapper.clientWidth;\n            wrapperRect = this.util.withOrientation(\n                this.wrapper.getBoundingClientRect(),\n                this.vertical\n            );\n\n            drag = true;\n            start = this.wavesurfer.drawer.handleEvent(e, true);\n            region = null;\n            scrollDirection = null;\n        };\n        this.wrapper.addEventListener('mousedown', eventDown);\n        this.wrapper.addEventListener('touchstart', eventDown);\n        this.on('disable-drag-selection', () => {\n            this.wrapper.removeEventListener('touchstart', eventDown);\n            this.wrapper.removeEventListener('mousedown', eventDown);\n        });\n\n        const eventUp = e => {\n            if (e.touches && e.touches.length > 1) {\n                return;\n            }\n\n            drag = false;\n            pxMove = 0;\n            scrollDirection = null;\n\n            if (region) {\n                this.util.preventClick();\n                region.fireEvent('update-end', e);\n                this.wavesurfer.fireEvent('region-update-end', region, e);\n            }\n\n            region = null;\n        };\n        this.wrapper.addEventListener('mouseleave', eventUp);\n        this.wrapper.addEventListener('mouseup', eventUp);\n        this.wrapper.addEventListener('touchend', eventUp);\n\n        document.body.addEventListener('mouseup', eventUp);\n        document.body.addEventListener('touchend', eventUp);\n        this.on('disable-drag-selection', () => {\n            document.body.removeEventListener('mouseup', eventUp);\n            document.body.removeEventListener('touchend', eventUp);\n            this.wrapper.removeEventListener('touchend', eventUp);\n            this.wrapper.removeEventListener('mouseup', eventUp);\n            this.wrapper.removeEventListener('mouseleave', eventUp);\n        });\n\n        const eventMove = event => {\n            if (!drag) {\n                return;\n            }\n            if (++pxMove <= slop) {\n                return;\n            }\n\n            if (event.touches && event.touches.length > 1) {\n                return;\n            }\n            if (event.targetTouches && event.targetTouches[0].identifier != touchId) {\n                return;\n            }\n\n            // auto-create a region during mouse drag, unless region-count would exceed \"maxRegions\"\n            if (!region) {\n                region = this.add(params || {});\n                if (!region) {\n                    return;\n                }\n            }\n\n            const end = this.wavesurfer.drawer.handleEvent(event);\n            const startUpdate = this.wavesurfer.regions.util.getRegionSnapToGridValue(\n                start * duration\n            );\n            const endUpdate = this.wavesurfer.regions.util.getRegionSnapToGridValue(\n                end * duration\n            );\n            region.update({\n                start: Math.min(endUpdate, startUpdate),\n                end: Math.max(endUpdate, startUpdate)\n            });\n\n            let orientedEvent = this.util.withOrientation(event, this.vertical);\n\n            // If scrolling is enabled\n            if (scroll && container.clientWidth < this.wrapper.scrollWidth) {\n                // Check threshold based on mouse\n                const x = orientedEvent.clientX - wrapperRect.left;\n                if (x <= scrollThreshold) {\n                    scrollDirection = -1;\n                } else if (x >= wrapperRect.right - scrollThreshold) {\n                    scrollDirection = 1;\n                } else {\n                    scrollDirection = null;\n                }\n                scrollDirection && edgeScroll(event);\n            }\n        };\n        this.wrapper.addEventListener('mousemove', eventMove);\n        this.wrapper.addEventListener('touchmove', eventMove);\n        this.on('disable-drag-selection', () => {\n            this.wrapper.removeEventListener('touchmove', eventMove);\n            this.wrapper.removeEventListener('mousemove', eventMove);\n        });\n\n        this.wavesurfer.on('region-created', region => {\n            if (this.regionsMinLength) {\n                region.minLength = this.regionsMinLength;\n            }\n        });\n    }\n\n    disableDragSelection() {\n        this.fireEvent('disable-drag-selection');\n    }\n\n    /**\n     * Get current region\n     *\n     * The smallest region that contains the current time. If several such\n     * regions exist, take the first. Return `null` if none exist.\n     *\n     * @returns {Region} The current region\n     */\n    getCurrentRegion() {\n        const time = this.wavesurfer.getCurrentTime();\n        let min = null;\n        Object.keys(this.list).forEach(id => {\n            const cur = this.list[id];\n            if (cur.start <= time && cur.end >= time) {\n                if (!min || cur.end - cur.start < min.end - min.start) {\n                    min = cur;\n                }\n            }\n        });\n\n        return min;\n    }\n\n    /**\n     * Match the value to the grid, if required\n     *\n     * If the regions plugin params have a snapToGridInterval set, return the\n     * value matching the nearest grid interval. If no snapToGridInterval is set,\n     * the passed value will be returned without modification.\n     *\n     * @param {number} value the value to snap to the grid, if needed\n     * @param {Object} params the regions plugin params\n     * @returns {number} value\n     */\n    getRegionSnapToGridValue(value, params) {\n        if (params.snapToGridInterval) {\n            // the regions should snap to a grid\n            const offset = params.snapToGridOffset || 0;\n            return (\n                Math.round((value - offset) / params.snapToGridInterval) *\n                    params.snapToGridInterval +\n                offset\n            );\n        }\n\n        // no snap-to-grid\n        return value;\n    }\n}\n","/**\n *  @since 4.0.0\n *\n * (Single) Region plugin class\n *\n * Must be turned into an observer before instantiating. This is done in\n * `RegionsPlugin` (main plugin class).\n *\n * @extends {Observer}\n */\nexport class Region {\n    constructor(params, regionsUtils, ws) {\n        this.wavesurfer = ws;\n        this.wrapper = ws.drawer.wrapper;\n        this.util = ws.util;\n        this.style = this.util.style;\n        this.regionsUtil = regionsUtils;\n        this.vertical = ws.drawer.params.vertical;\n\n        this.id = params.id == null ? ws.util.getId() : params.id;\n        this.start = Number(params.start) || 0;\n        this.end =\n            params.end == null\n                ? // small marker-like region\n                this.start +\n                (4 / this.wrapper.scrollWidth) * this.wavesurfer.getDuration()\n                : Number(params.end);\n        this.resize =\n            params.resize === undefined ? true : Boolean(params.resize);\n        this.drag = params.drag === undefined ? true : Boolean(params.drag);\n        // reflect resize and drag state of region for region-updated listener\n        this.isResizing = false;\n        this.isDragging = false;\n        this.loop = Boolean(params.loop);\n        this.color = params.color || 'rgba(0, 0, 0, 0.1)';\n        // The left and right handleStyle properties can be set to 'none' for\n        // no styling or can be assigned an object containing CSS properties.\n        this.handleStyle = params.handleStyle || {\n            left: {},\n            right: {}\n        };\n        this.handleLeftEl = null;\n        this.handleRightEl = null;\n        this.data = params.data || {};\n        this.attributes = params.attributes || {};\n        this.showTooltip = params.showTooltip ?? true;\n\n        this.maxLength = params.maxLength;\n        // It assumes the minLength parameter value, or the regionsMinLength parameter value, if the first one not provided\n        this.minLength = params.minLength;\n        this._onRedraw = () => this.updateRender();\n\n        this.scroll = params.scroll !== false && ws.params.scrollParent;\n        this.scrollSpeed = params.scrollSpeed || 1;\n        this.scrollThreshold = params.scrollThreshold || 10;\n        // Determines whether the context menu is prevented from being opened.\n        this.preventContextMenu =\n            params.preventContextMenu === undefined\n                ? false\n                : Boolean(params.preventContextMenu);\n\n        // select channel ID to set region\n        let channelIdx =\n            params.channelIdx == null ? -1 : parseInt(params.channelIdx);\n        this.regionHeight = '100%';\n        this.marginTop = '0px';\n\n        if (channelIdx !== -1) {\n            let channelCount =\n                this.wavesurfer.backend.buffer != null\n                    ? this.wavesurfer.backend.buffer.numberOfChannels\n                    : -1;\n            if (channelCount >= 0 && channelIdx < channelCount) {\n                this.regionHeight = Math.floor((1 / channelCount) * 100) + '%';\n                this.marginTop =\n                    this.wavesurfer.getHeight() * channelIdx + 'px';\n            }\n        }\n\n        this.formatTimeCallback = params.formatTimeCallback;\n        this.edgeScrollWidth = params.edgeScrollWidth;\n        this.bindInOut();\n        this.render();\n        this.wavesurfer.on('zoom', this._onRedraw);\n        this.wavesurfer.on('redraw', this._onRedraw);\n        this.wavesurfer.fireEvent('region-created', this);\n    }\n\n    /* Update region params. */\n    update(params, eventParams) {\n        if (params.start != null) {\n            this.start = Number(params.start);\n        }\n        if (params.end != null) {\n            this.end = Number(params.end);\n        }\n        if (params.loop != null) {\n            this.loop = Boolean(params.loop);\n        }\n        if (params.color != null) {\n            this.color = params.color;\n        }\n        if (params.handleStyle != null) {\n            this.handleStyle = params.handleStyle;\n        }\n        if (params.data != null) {\n            this.data = params.data;\n        }\n        if (params.resize != null) {\n            this.resize = Boolean(params.resize);\n            this.updateHandlesResize(this.resize);\n        }\n        if (params.drag != null) {\n            this.drag = Boolean(params.drag);\n        }\n        if (params.maxLength != null) {\n            this.maxLength = Number(params.maxLength);\n        }\n        if (params.minLength != null) {\n            this.minLength = Number(params.minLength);\n        }\n        if (params.attributes != null) {\n            this.attributes = params.attributes;\n        }\n\n        this.updateRender();\n        this.fireEvent('update');\n        this.wavesurfer.fireEvent('region-updated', this, eventParams);\n    }\n\n    /* Remove a single region. */\n    remove() {\n        if (this.element) {\n            this.wrapper.removeChild(this.element.domElement);\n            this.element = null;\n            this.fireEvent('remove');\n            this.wavesurfer.un('zoom', this._onRedraw);\n            this.wavesurfer.un('redraw', this._onRedraw);\n            this.wavesurfer.fireEvent('region-removed', this);\n        }\n    }\n\n    /**\n     * Play the audio region.\n     * @param {number} start Optional offset to start playing at\n     */\n    play(start) {\n        const s = start || this.start;\n        this.wavesurfer.play(s, this.end);\n        this.fireEvent('play');\n        this.wavesurfer.fireEvent('region-play', this);\n    }\n\n    /**\n     * Play the audio region in a loop.\n     * @param {number} start Optional offset to start playing at\n     * */\n    playLoop(start) {\n        this.loop = true;\n        this.play(start);\n    }\n\n    /**\n     * Set looping on/off.\n     * @param {boolean} loop True if should play in loop\n     */\n    setLoop(loop) {\n        this.loop = loop;\n    }\n\n    /* Render a region as a DOM element. */\n    render() {\n        this.element = this.util.withOrientation(\n            this.wrapper.appendChild(document.createElement('region')),\n            this.vertical\n        );\n\n        this.element.className = 'wavesurfer-region';\n        if (this.showTooltip) {\n            this.element.title = this.formatTime(this.start, this.end);\n        }\n        this.element.setAttribute('data-id', this.id);\n\n        for (const attrname in this.attributes) {\n            this.element.setAttribute(\n                'data-region-' + attrname,\n                this.attributes[attrname]\n            );\n        }\n\n        this.style(this.element, {\n            position: 'absolute',\n            zIndex: 2,\n            height: this.regionHeight,\n            top: this.marginTop\n        });\n\n        /* Resize handles */\n        if (this.resize) {\n            this.handleLeftEl = this.util.withOrientation(\n                this.element.appendChild(document.createElement('handle')),\n                this.vertical\n            );\n            this.handleRightEl = this.util.withOrientation(\n                this.element.appendChild(document.createElement('handle')),\n                this.vertical\n            );\n\n            this.handleLeftEl.className = 'wavesurfer-handle wavesurfer-handle-start';\n            this.handleRightEl.className = 'wavesurfer-handle wavesurfer-handle-end';\n\n            // Default CSS properties for both handles.\n            const css = {\n                cursor: this.vertical ? 'row-resize' : 'col-resize',\n                position: 'absolute',\n                top: '0px',\n                width: '2px',\n                height: '100%',\n                backgroundColor: 'rgba(0, 0, 0, 1)'\n            };\n\n            // Merge CSS properties per handle.\n            const handleLeftCss =\n                this.handleStyle.left !== 'none'\n                    ? Object.assign(\n                        { left: '0px' },\n                        css,\n                        this.handleStyle.left\n                    )\n                    : null;\n            const handleRightCss =\n                this.handleStyle.right !== 'none'\n                    ? Object.assign(\n                        { right: '0px' },\n                        css,\n                        this.handleStyle.right\n                    )\n                    : null;\n\n            if (handleLeftCss) {\n                this.style(this.handleLeftEl, handleLeftCss);\n            }\n\n            if (handleRightCss) {\n                this.style(this.handleRightEl, handleRightCss);\n            }\n        }\n\n        this.updateRender();\n        this.bindEvents();\n    }\n\n    formatTime(start, end) {\n        if (this.formatTimeCallback) {\n            return this.formatTimeCallback(start, end);\n        }\n        return (start == end ? [start] : [start, end])\n            .map((time) =>\n                [\n                    Math.floor((time % 3600) / 60), // minutes\n                    ('00' + Math.floor(time % 60)).slice(-2) // seconds\n                ].join(':')\n            )\n            .join('-');\n    }\n\n    getWidth() {\n        return this.wavesurfer.drawer.width / this.wavesurfer.params.pixelRatio;\n    }\n\n    /* Update element's position, width, color. */\n    updateRender() {\n        // duration varies during loading process, so don't overwrite important data\n        const dur = this.wavesurfer.getDuration();\n        const width = this.getWidth();\n\n        let startLimited = this.start;\n        let endLimited = this.end;\n        if (startLimited < 0) {\n            startLimited = 0;\n            endLimited = endLimited - startLimited;\n        }\n        if (endLimited > dur) {\n            endLimited = dur;\n            startLimited = dur - (endLimited - startLimited);\n        }\n\n        if (this.minLength != null) {\n            endLimited = Math.max(startLimited + this.minLength, endLimited);\n        }\n\n        if (this.maxLength != null) {\n            endLimited = Math.min(startLimited + this.maxLength, endLimited);\n        }\n\n        if (this.element != null) {\n            // Calculate the left and width values of the region such that\n            // no gaps appear between regions.\n            const left = Math.round((startLimited / dur) * width);\n            const regionWidth = Math.round((endLimited / dur) * width) - left;\n\n            this.style(this.element, {\n                left: left + 'px',\n                width: regionWidth + 'px',\n                backgroundColor: this.color,\n                cursor: this.drag ? 'move' : 'default'\n            });\n\n            for (const attrname in this.attributes) {\n                this.element.setAttribute(\n                    'data-region-' + attrname,\n                    this.attributes[attrname]\n                );\n            }\n\n            if (this.showTooltip) {\n                this.element.title = this.formatTime(this.start, this.end);\n            }\n        }\n    }\n\n    /* Bind audio events. */\n    bindInOut() {\n        this.firedIn = false;\n        this.firedOut = false;\n\n        const onProcess = (time) => {\n            let start = Math.round(this.start * 10) / 10;\n            let end = Math.round(this.end * 10) / 10;\n            time = Math.round(time * 10) / 10;\n\n            if (\n                !this.firedOut &&\n                this.firedIn &&\n                (start > time || end <= time)\n            ) {\n                this.firedOut = true;\n                this.firedIn = false;\n                this.fireEvent('out');\n                this.wavesurfer.fireEvent('region-out', this);\n            }\n            if (!this.firedIn && start <= time && end > time) {\n                this.firedIn = true;\n                this.firedOut = false;\n                this.fireEvent('in');\n                this.wavesurfer.fireEvent('region-in', this);\n            }\n        };\n\n        this.wavesurfer.backend.on('audioprocess', onProcess);\n\n        this.on('remove', () => {\n            this.wavesurfer.backend.un('audioprocess', onProcess);\n        });\n\n        /* Loop playback. */\n        this.on('out', () => {\n            if (this.loop) {\n                const realTime = this.wavesurfer.getCurrentTime();\n                if (realTime >= this.start && realTime <= this.end) {\n                    this.wavesurfer.play(this.start);\n                }\n            }\n        });\n    }\n\n    /* Bind DOM events. */\n    bindEvents() {\n        const preventContextMenu = this.preventContextMenu;\n\n        this.element.addEventListener('mouseenter', (e) => {\n            this.fireEvent('mouseenter', e);\n            this.wavesurfer.fireEvent('region-mouseenter', this, e);\n        });\n\n        this.element.addEventListener('mouseleave', (e) => {\n            this.fireEvent('mouseleave', e);\n            this.wavesurfer.fireEvent('region-mouseleave', this, e);\n        });\n\n        this.element.addEventListener('click', (e) => {\n            e.preventDefault();\n            this.fireEvent('click', e);\n            this.wavesurfer.fireEvent('region-click', this, e);\n        });\n\n        this.element.addEventListener('dblclick', (e) => {\n            e.stopPropagation();\n            e.preventDefault();\n            this.fireEvent('dblclick', e);\n            this.wavesurfer.fireEvent('region-dblclick', this, e);\n        });\n\n        this.element.addEventListener('contextmenu', (e) => {\n            if (preventContextMenu) {\n                e.preventDefault();\n            }\n            this.fireEvent('contextmenu', e);\n            this.wavesurfer.fireEvent('region-contextmenu', this, e);\n        });\n\n        /* Drag or resize on mousemove. */\n        if (this.drag || this.resize) {\n            this.bindDragEvents();\n        }\n    }\n\n    bindDragEvents() {\n        const container = this.wavesurfer.drawer.container;\n        const scrollSpeed = this.scrollSpeed;\n        const scrollThreshold = this.scrollThreshold;\n        let startTime;\n        let touchId;\n        let drag;\n        let maxScroll;\n        let resize;\n        let updated = false;\n        let scrollDirection;\n        let wrapperRect;\n        let regionLeftHalfTime;\n        let regionRightHalfTime;\n\n        // Scroll when the user is dragging within the threshold\n        const edgeScroll = (event) => {\n            let orientedEvent = this.util.withOrientation(event, this.vertical);\n            const duration = this.wavesurfer.getDuration();\n            if (!scrollDirection || (!drag && !resize)) {\n                return;\n            }\n\n            const x = orientedEvent.clientX;\n            let distanceBetweenCursorAndWrapperEdge = 0;\n            let regionHalfTimeWidth = 0;\n            let adjustment = 0;\n\n            // Get the currently selected time according to the mouse position\n            let time = this.regionsUtil.getRegionSnapToGridValue(\n                this.wavesurfer.drawer.handleEvent(event) * duration\n            );\n\n            if (drag) {\n                // Considering the point of contact with the region while edgescrolling\n                if (scrollDirection === -1) {\n                    regionHalfTimeWidth = regionLeftHalfTime * this.wavesurfer.params.minPxPerSec;\n                    distanceBetweenCursorAndWrapperEdge = x - wrapperRect.left;\n                } else {\n                    regionHalfTimeWidth = regionRightHalfTime * this.wavesurfer.params.minPxPerSec;\n                    distanceBetweenCursorAndWrapperEdge = wrapperRect.right - x;\n                }\n            } else {\n                // Considering minLength while edgescroll\n                let minLength = this.minLength;\n                if (!minLength) {\n                    minLength = 0;\n                }\n\n                if (resize === 'start') {\n                    if (time > this.end - minLength) {\n                        time = this.end - minLength;\n                        adjustment = scrollSpeed * scrollDirection;\n                    }\n\n                    if (time < 0) {\n                        time = 0;\n                    }\n                } else if (resize === 'end') {\n                    if (time < this.start + minLength) {\n                        time = this.start + minLength;\n                        adjustment = scrollSpeed * scrollDirection;\n                    }\n\n                    if (time > duration) {\n                        time = duration;\n                    }\n                }\n            }\n\n            // Don't edgescroll if region has reached min or max limit\n            const wrapperScrollLeft = this.wrapper.scrollLeft;\n\n            if (scrollDirection === -1) {\n                if (Math.round(wrapperScrollLeft) === 0) {\n                    return;\n                }\n\n                if (Math.round(wrapperScrollLeft - regionHalfTimeWidth + distanceBetweenCursorAndWrapperEdge) <= 0) {\n                    return;\n                }\n            } else {\n                if (Math.round(wrapperScrollLeft) === maxScroll) {\n                    return;\n                }\n\n                if (Math.round(wrapperScrollLeft + regionHalfTimeWidth - distanceBetweenCursorAndWrapperEdge) >= maxScroll) {\n                    return;\n                }\n            }\n\n            // Update scroll position\n            let scrollLeft = wrapperScrollLeft - adjustment + scrollSpeed * scrollDirection;\n\n            if (scrollDirection === -1) {\n                const calculatedLeft = Math.max(0 + regionHalfTimeWidth - distanceBetweenCursorAndWrapperEdge, scrollLeft);\n                this.wrapper.scrollLeft = scrollLeft = calculatedLeft;\n            } else {\n                const calculatedRight = Math.min(maxScroll - regionHalfTimeWidth + distanceBetweenCursorAndWrapperEdge, scrollLeft);\n                this.wrapper.scrollLeft = scrollLeft = calculatedRight;\n            }\n\n            const delta = time - startTime;\n            startTime = time;\n\n            // Continue dragging or resizing\n            drag ? this.onDrag(delta) : this.onResize(delta, resize);\n\n            // Repeat\n            window.requestAnimationFrame(() => {\n                edgeScroll(event);\n            });\n        };\n\n        const onDown = (event) => {\n            const duration = this.wavesurfer.getDuration();\n            if (event.touches && event.touches.length > 1) {\n                return;\n            }\n            touchId = event.targetTouches ? event.targetTouches[0].identifier : null;\n\n            // stop the event propagation, if this region is resizable or draggable\n            // and the event is therefore handled here.\n            if (this.drag || this.resize) {\n                event.stopPropagation();\n            }\n\n            // Store the selected startTime we begun dragging or resizing\n            startTime = this.regionsUtil.getRegionSnapToGridValue(\n                this.wavesurfer.drawer.handleEvent(event, true) * duration\n            );\n\n            // Store the selected point of contact when we begin dragging\n            regionLeftHalfTime = startTime - this.start;\n            regionRightHalfTime = this.end - startTime;\n\n            // Store for scroll calculations\n            maxScroll = this.wrapper.scrollWidth - this.wrapper.clientWidth;\n\n            wrapperRect = this.util.withOrientation(\n                this.wrapper.getBoundingClientRect(),\n                this.vertical\n            );\n\n            this.isResizing = false;\n            this.isDragging = false;\n            if (event.target.tagName.toLowerCase() === 'handle') {\n                this.isResizing = true;\n                resize = event.target.classList.contains('wavesurfer-handle-start')\n                    ? 'start'\n                    : 'end';\n            } else {\n                this.isDragging = true;\n                drag = true;\n                resize = false;\n            }\n        };\n        const onUp = (event) => {\n            if (event.touches && event.touches.length > 1) {\n                return;\n            }\n\n            if (drag || resize) {\n                this.isDragging = false;\n                this.isResizing = false;\n                drag = false;\n                scrollDirection = null;\n                resize = false;\n            }\n\n            if (updated) {\n                updated = false;\n                this.util.preventClick();\n                this.fireEvent('update-end', event);\n                this.wavesurfer.fireEvent('region-update-end', this, event);\n            }\n        };\n        const onMove = (event) => {\n            const duration = this.wavesurfer.getDuration();\n            let orientedEvent = this.util.withOrientation(event, this.vertical);\n\n            if (event.touches && event.touches.length > 1) {\n                return;\n            }\n            if (event.targetTouches && event.targetTouches[0].identifier != touchId) {\n                return;\n            }\n            if (!drag && !resize) {\n                return;\n            }\n\n            const oldTime = startTime;\n            let time = this.regionsUtil.getRegionSnapToGridValue(\n                this.wavesurfer.drawer.handleEvent(event) * duration\n            );\n\n            if (drag) {\n                // To maintain relative cursor start point while dragging\n                const maxEnd = this.wavesurfer.getDuration();\n                if (time > maxEnd - regionRightHalfTime) {\n                    time = maxEnd - regionRightHalfTime;\n                }\n\n                if (time - regionLeftHalfTime < 0) {\n                    time = regionLeftHalfTime;\n                }\n            }\n\n            if (resize) {\n                // To maintain relative cursor start point while resizing\n                // we have to handle for minLength\n                let minLength = this.minLength;\n                if (!minLength) {\n                    minLength = 0;\n                }\n\n                if (resize === 'start') {\n                    if (time > this.end - minLength) {\n                        time = this.end - minLength;\n                    }\n\n                    if (time < 0) {\n                        time = 0;\n                    }\n                } else if (resize === 'end') {\n                    if (time < this.start + minLength) {\n                        time = this.start + minLength;\n                    }\n\n                    if (time > duration) {\n                        time = duration;\n                    }\n                }\n            }\n\n            let delta = time - startTime;\n            startTime = time;\n\n            // Drag\n            if (this.drag && drag) {\n                updated = updated || !!delta;\n                this.onDrag(delta);\n            }\n\n            // Resize\n            if (this.resize && resize) {\n                updated = updated || !!delta;\n                this.onResize(delta, resize);\n            }\n\n            if (\n                this.scroll && container.clientWidth < this.wrapper.scrollWidth\n            ) {\n                // Triggering edgescroll from within edgeScrollWidth\n                let x = orientedEvent.clientX;\n\n                // Check direction\n                if (x < wrapperRect.left + this.edgeScrollWidth) {\n                    scrollDirection = -1;\n                } else if (x > wrapperRect.right - this.edgeScrollWidth) {\n                    scrollDirection = 1;\n                } else {\n                    scrollDirection = null;\n                }\n\n                if (scrollDirection) {\n                    edgeScroll(event);\n                }\n            }\n        };\n\n        this.element.addEventListener('mousedown', onDown);\n        this.element.addEventListener('touchstart', onDown);\n\n        document.body.addEventListener('mousemove', onMove);\n        document.body.addEventListener('touchmove', onMove, {passive: false});\n\n        document.addEventListener('mouseup', onUp);\n        document.body.addEventListener('touchend', onUp);\n\n        this.on('remove', () => {\n            document.removeEventListener('mouseup', onUp);\n            document.body.removeEventListener('touchend', onUp);\n            document.body.removeEventListener('mousemove', onMove);\n            document.body.removeEventListener('touchmove', onMove);\n        });\n\n        this.wavesurfer.on('destroy', () => {\n            document.removeEventListener('mouseup', onUp);\n            document.body.removeEventListener('touchend', onUp);\n        });\n    }\n\n    onDrag(delta) {\n        const maxEnd = this.wavesurfer.getDuration();\n        if (this.end + delta > maxEnd) {\n            delta = maxEnd - this.end;\n        }\n\n        if (this.start + delta < 0) {\n            delta = this.start * -1;\n        }\n\n        const eventParams = {\n            direction: this._getDragDirection(delta),\n            action: 'drag'\n        };\n\n        this.update({\n            start: this.start + delta,\n            end: this.end + delta\n        }, eventParams);\n    }\n\n    /**\n     * Returns the direction of dragging region based on delta\n     * Negative delta means region is moving to the left\n     * Positive - to the right\n     * For zero delta the direction is not defined\n     * @param {number} delta Drag offset\n     * @returns {string|null} Direction 'left', 'right' or null\n     */\n    _getDragDirection(delta) {\n        if (delta < 0) {\n            return 'left';\n        }\n        if (delta > 0) {\n            return 'right';\n        }\n        return null;\n    }\n\n    /**\n     * @example\n     * onResize(-5, 'start') // Moves the start point 5 seconds back\n     * onResize(0.5, 'end') // Moves the end point 0.5 seconds forward\n     *\n     * @param {number} delta How much to add or subtract, given in seconds\n     * @param {string} direction 'start 'or 'end'\n     */\n    onResize(delta, direction) {\n        const duration = this.wavesurfer.getDuration();\n        const eventParams = {\n            action: 'resize',\n            direction: direction === 'start' ? 'right' : 'left'\n        };\n\n        if (direction === 'start') {\n            // Check if changing the start by the given delta would result in the region being smaller than minLength\n            // Ignore cases where we are making the region wider rather than shrinking it\n            if (delta > 0 && this.end - (this.start + delta) < this.minLength) {\n                delta = this.end - this.minLength - this.start;\n            }\n\n            if (delta < 0 && (this.start + delta) < 0) {\n                delta = this.start * -1;\n            }\n\n            this.update({\n                start: Math.min(this.start + delta, this.end),\n                end: Math.max(this.start + delta, this.end)\n            }, eventParams);\n        } else {\n            // Check if changing the end by the given delta would result in the region being smaller than minLength\n            // Ignore cases where we are making the region wider rather than shrinking it\n            if (delta < 0 && this.end + delta - this.start < this.minLength) {\n                delta = this.start + this.minLength - this.end;\n            }\n\n            if (delta > 0 && (this.end + delta) > duration) {\n                delta = duration - this.end;\n            }\n\n            this.update({\n                start: Math.min(this.end + delta, this.start),\n                end: Math.max(this.end + delta, this.start)\n            }, eventParams);\n        }\n    }\n\n    updateHandlesResize(resize) {\n        let cursorStyle;\n        if (resize) {\n            cursorStyle = this.vertical ? 'row-resize' : 'col-resize';\n        } else {\n            cursorStyle = 'auto';\n        }\n\n        this.handleLeftEl && this.style(this.handleLeftEl, { cursor: cursorStyle });\n        this.handleRightEl && this.style(this.handleRightEl, { cursor: cursorStyle });\n    }\n}\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(23);\n"],"names":["root","factory","exports","module","define","amd","self","RegionsPlugin","params","ws","this","wavesurfer","util","getRegionSnapToGridValue","value","maxRegions","regionsMinLength","Object","getOwnPropertyNames","Observer","prototype","forEach","key","Region","_onBackendCreated","wrapper","drawer","orientation","regions","region","edgeScrollWidth","clientWidth","add","list","_onReady","vertical","dragSelection","enableDragSelection","keys","id","updateRender","name","deferInit","staticProps","addRegion","options","initialisedPluginList","initPlugin","clearRegions","clear","disableDragSelection","instance","isReady","once","un","length","wouldExceedMaxRegions","minLength","on","remove","drag","maxScroll","start","touchId","scrollDirection","wrapperRect","slop","container","scroll","scrollParent","scrollSpeed","scrollThreshold","duration","getDuration","pxMove","edgeScroll","e","scrollLeft","Math","min","max","end","handleEvent","update","window","requestAnimationFrame","eventDown","touches","targetTouches","identifier","scrollWidth","withOrientation","getBoundingClientRect","addEventListener","removeEventListener","eventUp","preventClick","fireEvent","document","body","eventMove","event","startUpdate","endUpdate","orientedEvent","x","clientX","left","right","time","getCurrentTime","cur","snapToGridInterval","offset","snapToGridOffset","round","regionsUtils","style","regionsUtil","getId","Number","resize","undefined","Boolean","isResizing","isDragging","loop","color","handleStyle","handleLeftEl","handleRightEl","data","attributes","showTooltip","maxLength","_onRedraw","preventContextMenu","channelIdx","parseInt","regionHeight","marginTop","channelCount","backend","buffer","numberOfChannels","floor","getHeight","formatTimeCallback","bindInOut","render","eventParams","updateHandlesResize","element","removeChild","domElement","s","play","attrname","appendChild","createElement","className","title","formatTime","setAttribute","position","zIndex","height","top","css","cursor","width","backgroundColor","handleLeftCss","assign","handleRightCss","bindEvents","map","slice","join","pixelRatio","dur","getWidth","startLimited","endLimited","regionWidth","firedIn","firedOut","onProcess","realTime","preventDefault","stopPropagation","bindDragEvents","startTime","regionLeftHalfTime","regionRightHalfTime","updated","distanceBetweenCursorAndWrapperEdge","regionHalfTimeWidth","adjustment","minPxPerSec","wrapperScrollLeft","calculatedLeft","calculatedRight","delta","onDrag","onResize","onDown","target","tagName","toLowerCase","classList","contains","onUp","onMove","maxEnd","passive","direction","_getDragDirection","action","cursorStyle","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","__webpack_modules__"],"sourceRoot":""}