<template>
	<view>
		<z-paging ref="squareActivityPaging" :refresher-enabled="true" :default-page-size="5" use-virtual-list :cell-height-mode="'dynamic'" @query="queryList">
			<!-- 搜索框 -->
			<view class='search-bar-content' id='activity-search-bar-content'>
				<view class='search-bar'
				@click="onSearchBarClick()"
				>
					<view class='iconfont icon-search' :style="{
						  fontSize: '25px',
						  color: '#707070'
						}">
					</view>
					<swiper vertical="true" autoplay="true" interval='4000' class='labels-swiper'>
						<swiper-item v-for="(item,index) in hotLabels" :key='item.id'>
							<view class='search-tips'>
								{{item.content}}
							</view>
						</swiper-item>
					</swiper>
					
				</view>
				<!-- 推荐的标签 -->
				<view class="recommended-labels">
					<scroll-view scroll-X="true"  class="recommended-labels-scroll">
						<view class="recommended-labels-content">
							<view :key="'recommended-label'+index" v-for="(item,index) in RecommendedLabels" 
							class="recommended-labels-item"
							@click="onRecommendedClick(item)"
							>
								<view class="label-icon">
									<image class="label-icon-image"
									mode="aspectFill"
									:src="item.icon"
									>	
									</image>
								</view>
								<view class="label-text">
									<text>#{{item.content}}</text>
								</view>
							</view>
						</view>
					</scroll-view>
				</view>
			</view>
			<view v-if="isLoading">
				<view :key="index" v-for="(item,index) in [...new Array(5)]">
					<activity-skeleton></activity-skeleton>
				</view>
			</view>
			<template v-slot:cell="{item,index}" >
				<view class="item" >
					<activity-item :articleItem="item"
						:isMe="item.isAnonymity!=1&&myId == item.publisher.id" 
						:key="'activity-'+item.id"
						@onFollowClick="onFollow(item)" 
						@onMoreClick="onMoreClick(item)"
						@onClick="onActivityItemClick(item)"
						@onShareClick="onShareClick(item)"
					></activity-item>
				</view>
			</template>
			
		<!-- </scroll-view> -->
		</z-paging>
		<!-- 动态操作弹出层 -->
		<action-sheet ref="articleActionPopup" :needHead="true" title="动态选择" :needCancelButton="true">
			<block v-if="editArticleItem.id">
				<block v-if="editArticleItem.isAnonymity">
					<action-sheet-item @click="onPopupReportClick(editArticleItem)" icon="icon-alert" title="举报" />
				</block>
				<block v-else>
					<block v-if="editArticleItem.publisher.id == myId">
						<action-sheet-item icon="icon-delete" title="删除" @click="onPopupDeleteClick"/>
					</block>
					<block v-else>
						<action-sheet-item v-if="editArticleItem.publisher.isAttention == 1"
						icon="icon-quxiaoguanzhu" title="取消关注" @click="onCancelFollow(editArticleItem)"/>
						<action-sheet-item v-else icon="icon-guanzhu" title="关注" @click="onFollow(editArticleItem)"/>
						<action-sheet-item @click="onChatClick(editArticleItem)" icon="icon-message" title="私聊"/>
						<action-sheet-item @click="onPopupReportClick(editArticleItem)" icon="icon-alert" title="举报"/>
					</block>
				</block>
			</block>
		</action-sheet>
	</view>
</template>

<script lang="ts">
	import {
		REQUEST_SUCCEEDED_CODE,
		reportObjectType,
		RingingToneList
	} from '@/common/constants';
	import {
		deleteMyArticle,
		cancelAttention,
		followUser,
		getHotLabels,	
	} from "@/common/requestFunctions";
	import {
		REFRESH_DYNAMIC_SOUND
	} from "@/common/storageKeys";
	import {
		request
	} from '@/utils/request';
	import {
		ArticleItem,RingingToneItem
	} from '@/common/dataClass';
	import {
		getRecommendedLabels
	} from './service'
	/**
	 * squareActivity 广场页面
	 * @description: 广场页面
	 * @Author: 穆兰
	 * @Date: 2022/5/1
	 * @LastEditors: 穆兰
	 * @LastEditTime: 2022/5/1
	 * @property {Number} scollerHeight - 页面高度
	 * @property {Number} refresherEnabled - 是否允许页面刷新
	 * @event {Function} onRefreshing - 页面刷新时
	 */
	export default {
		emits:['onRefreshing'],
		props:{
			scollerHeight:{
				type:Number,
				require:true
			},
			refresherEnabled:{
				type:Boolean,
				require:true
			},
			myId:{
				type:Number,
				require:true
			}
		},
		data() {
			return {
				isLoading:false,
				data:[],
				editArticleItem:{},
				hotLabels:[],
				touchY:0,
				
			}
		},
		async created(){
			this.isLoading = true;
			this.RecommendedLabels = await getRecommendedLabels();
			this.hotLabels = await getHotLabels(1);
			
		},
		methods: {
			/**
			 * @description 用于当scroll内容过少无法上拉时加载更多数据
			 * @param {Object} e
			 */
			onContentTouchStart(e){
				this.touchY=e.changedTouches[0].clientY
			},
			/**
			 * @description 用于当scroll内容过少无法下拉时加载更多数据
			 * @param {Object} e
			 */
			onContentTouchEnd(e){
				if (this.touchY-e.changedTouches[0].clientY   > 50) {
						//如果没有更多数据或者已经加载的数据大于10这不采用这种刷新方式
						if (!this.haveMoreData||this.data.length>10) { //没有更多时不进行请求
							return
						}else{
							this.showBottomLoading = true
							this.page = this.page + 1
							this.getSquarearticles(this.page)
						}
				}
			},
			
			/**
			 * @description 点击搜索框
			 */
			onSearchBarClick(){
				uni.navigateTo({
					url:"/pages/label-activity/search-activity"
				})
			},
			/**
			 * @description 点击推荐的标签
			 * @param item
			 */
			onRecommendedClick(item){
				uni.navigateTo({
					url:`../../pages/label-activity/label-activity?labelId=${item.id}&labelContent=${item.content}`,
				})
			},
			queryList(pageNo, pageSize) {
				//组件加载时会自动触发此方法，因此默认页面加载时会自动触发，无需手动调用
				//这里的pageNo和pageSize会自动计算好，直接传给服务器即可
				//模拟请求服务器获取分页数据，请替换成自己的网络请求
				request({
					data: {
						method: 'GET',
						group: 'activity',
						action: 'square',
						data: {
							page:pageNo
						},
						header: {
							'content-type': 'application/x-www-form-urlencoded', // 默认值
							
						},
					}
				}).then((res)=>{
					if(res.data.code === REQUEST_SUCCEEDED_CODE){
						this.$refs.squareActivityPaging.complete(res.data.data.list);
					}else{
						this.$refs.squareActivityPaging.complete(false);
					}
					this.isLoading = false
				},()=>{	
					this.$refs.squareActivityPaging.complete(false);
					this.isLoading = false
				})
			},
			/**
			 * @description 点击popup/activity-item的关注按钮
			 *  @param item 
			 */
			async onFollow(item: ArticleItem) {
				if (!item.publisher) {
					return
				}
				let _this = this
				if (await followUser(item.publisher.id)) {
					let squareArticles = _this.data
					for (let i = 0; i < squareArticles.length; i++) {
						if (squareArticles[i].publisher && squareArticles[i].publisher.id == item.publisher.id) {
							squareArticles[i].publisher.isAttention = 1
						}
					}
					_this.data = squareArticles
					_this.$refs.articleActionPopup.close()
					uni.showToast({
						title: '关注成功',
						icon: 'success'
					})
				}
			},
			/**
			 * @description 点击动态上的更多按钮
			 */
			onMoreClick(item: ArticleItem) {
				this.$refs.articleActionPopup.open()
				this.editArticleItem = item
			},
			/**
			 * @description 点击某个动态
			 * @param {ArticleItem}
			 */
			onActivityItemClick(item){
				uni.navigateTo({
					url:`/pages/activity-info/activity-info?activityId=${item.id}`
				})
			},
			/**
			 * @description 点击动态的分享按钮
			 *  @param item 
			 */
			onShareClick(item){
				this.editArticleItem = item
			},
			/**
			 * @description 点击popup的取消关注按钮
			 * @param item 
			 */
			async onCancelFollow(item: ArticleItem) {
				if (!item.publisher) {
					return
				}
				let _this = this
				uni.showModal({
					title: '取消关注',
					content: `你确定要取消关注${item.publisher.username}`,
					success: async function(res) {
						if (res.confirm) {
							if (item.publisher)
								if (await cancelAttention(item.publisher.id)) {
									let squareArticles = _this.data
									for (let i = 0; i < squareArticles.length; i++) {
										if (squareArticles[i].publisher && squareArticles[i].publisher
											.id == item.publisher.id) {
											squareArticles[i].publisher.isAttention = 0
										}
									}
									_this.data = squareArticles
									_this.$refs.articleActionPopup.close()
									uni.showToast({
										title: '取消关注',
										icon: 'success'
									})
								}
						}
					}
				})
			},
			
			/**
			 * @description 点击popup私聊按钮
			 *  @param item 
			 */
			async onChatClick(item: ArticleItem){
				if(item.publisher)
				uni.navigateTo({
					url:`/pages/message-secondary-page/chat-content/chat-content?fromUserId=${item.publisher.id}`
				})
			},
			/**
			 * @description 点击popup的举报按钮
			 * @param {ArticleItem} item
			 */
			onPopupReportClick(item: ArticleItem){
				uni.navigateTo({
					url:`/pages/setting/report-user/report-user?objectId=${item.id}&objectType=${reportObjectType.activity}`
				})
				this.$refs.articleActionPopup.close()
			},
			
			/**
			 * @description 点击popup的删除按钮
			 */
			onPopupDeleteClick() {
				let _this = this
				uni.showModal({
					title: '删除动态',
					content: '你确定要删除这个动态吗',
					success: async function(res) {
						if (res.confirm) {
							if (await deleteMyArticle(_this.editArticleItem.id)) {
								let artices = _this.data
								for (let i = 0; i < artices.length; i++) {
									if (artices[i].id == _this.editArticleItem.id) {
										artices.splice(i, 1)
										break
									}
								}
								_this.data = artices
								_this.$refs.articleActionPopup.close()
								uni.showToast({
									title: '删除成功',
									icon: 'success'
								})
							}
						}
					}
				})
			},
			/**
			 * @description 播放刷新音效
			 */
			async playRefreshDynamicSound() {
			      let refreshDynamicSound = uni.getStorageSync(REFRESH_DYNAMIC_SOUND) as RingingToneItem
				  if(!refreshDynamicSound){
					  refreshDynamicSound = RingingToneList[6]
				  }
			      const innerAudioContext =uni.createInnerAudioContext()
			      innerAudioContext.autoplay = true
			      innerAudioContext.src = refreshDynamicSound.url
			    
			},
		}
	}
</script>

<style lang="scss">
	
	.scrollview {
		width: 100vw;
		overflow-anchor: auto;
	}
	.search-bar-content {
		height: fit-content;
		background-color: #fff;
		padding: 10px;
	}
	.search-bar {
		padding: 10rpx 20rpx;
		border-radius: 30rpx;
		background-color: #f7f3f3;
		display: flex;
		align-items: center;
	
		.search-tips {
			margin-left: 10rpx;
			color: #696969;
		}
		.labels-swiper {
			height: 50rpx;
			width: 80%;
		}
	}
	.recommended-labels{
		.recommended-labels-scroll{
			width: 100vw;
			background-color: #FFFFFF;
			margin-bottom: 10rpx;
			.recommended-labels-content{
				width: auto;
				display: flex;
				align-items: center;
				justify-content: flex-start;
				padding: 10rpx;
			}
			.recommended-labels-item{
				height: 130rpx;
				width: 130rpx;
				background-color: #FFFFFF;
				border-radius: 10rpx;
				margin: 0 10rpx;
				padding: 5rpx;
				text-align: center;
				.label-icon{
					height: 100rpx;
					width: 100rpx;
					margin: 0 auto;
					border-radius: 50rpx;
					border: solid 1rpx #4eccb8;
					display: flex;
					align-items: center;
					justify-content: center;
					.label-icon-image{
						height: 90rpx;
						width: 90rpx;
						border-radius: 45rpx;
						}
				}
				.label-text{
					font-size: 20rpx;
					font-weight: 600;
					color: #353535;
				}
			}
		}
		
	}
	.loading-content {
		width: 100%;
		height: 60px;
		text-align: center;
		display: flex;
		justify-content: center;
		align-items: center;
		font-weight: bold;
		font-size: small;
		color: #aaaaaa;
	}
	
</style>
